import * as fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import * as xlsx from 'xlsx';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const downloadsDir = path.join(__dirname, 'downloads');

async function getLatestXLSFile() {
    const files = await fs.readdir(downloadsDir);
    const xlsFiles = files.filter(f => f.endsWith('.xls') || f.endsWith('.xlsx'));

    if (xlsFiles.length === 0) throw new Error('XLS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ downloads');

    const filesWithStats = await Promise.all(
        xlsFiles.map(async f => {
            const stats = await fs.stat(path.join(downloadsDir, f));
            return { file: f, mtime: stats.mtime };
        })
    );

    filesWithStats.sort((a, b) => b.mtime - a.mtime);
    return path.join(downloadsDir, filesWithStats[0].file);
}

function parseTable(xlsPath) {
    const workbook = xlsx.readFile(xlsPath);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = xlsx.utils.sheet_to_json(sheet, { defval: '-' });

    return data.map(row => ({
        worker: String(row['Worker'] || row['–í–æ—Ä–∫–µ—Ä'] || '-'),
        hashRate: row['Hashrate_24h'] || row['–•–µ—à—Ä–µ–π—Ç_24—á'] || '-',
        uptime7: row['Uptime_7d'] || row['–ê–ø—Ç–∞–π–º_7–¥'] || '-',
        uptime30: row['Uptime_30d'] || row['–ê–ø—Ç–∞–π–º_30–¥'] || '-',
        uptime60: row['Uptime_60d'] || row['–ê–ø—Ç–∞–π–º_60–¥'] || '-',
        uptimePercent: row['Uptime_%'] || row['–ê–ø—Ç–∞–π–º_%'] || '-'
    }));
}

function generateHTML(rows) {
    const htmlHead = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ê–ø—Ç–∞–π–º –≤–æ—Ä–∫–µ—Ä–æ–≤ ViaBTC</title>
    <style>
        body {
            background-color: #0f111a;
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 40px;
        }
        h1 {
            color: #ffffff;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        thead {
            background-color: #22c55e;
            color: #000000;
        }
        th, td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid #1f2937;
        }
        tr:nth-child(even) {
            background-color: #1f2937;
        }
        tr:hover {
            background-color: #374151;
        }
        .highlight {
            color: #22c55e;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>üìä –ê–ø—Ç–∞–π–º –≤–æ—Ä–∫–µ—Ä–æ–≤ ViaBTC</h1>
    <table>
        <thead>
            <tr>
                <th>–í–æ—Ä–∫–µ—Ä</th><th>–•–µ—à—Ä–µ–π—Ç_24—á</th><th>–ê–ø—Ç–∞–π–º_7–¥</th><th>–ê–ø—Ç–∞–π–º_30–¥</th><th>–ê–ø—Ç–∞–π–º_60–¥</th><th>–ê–ø—Ç–∞–π–º_%</th>
            </tr>
        </thead>
        <tbody>
`;

    const htmlRows = rows.map(row => {
        return `<tr><td>${row.worker}</td><td>${row.hashRate}</td><td>${row.uptime7}</td><td>${row.uptime30}</td><td>${row.uptime60}</td><td>${row.uptimePercent}</td></tr>`;
    }).join('\n');

    const htmlTail = `
        </tbody>
    </table>
</body>
</html>
`;

    return htmlHead + htmlRows + htmlTail;
}

(async () => {
    try {
        const latestXLS = await getLatestXLSFile();
        const rows = parseTable(latestXLS);

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ—Ä–∫–µ—Ä—É
        rows.sort((a, b) => a.worker.localeCompare(b.worker, 'en', { numeric: true }));

        const html = generateHTML(rows);
        const outputPath = path.join(__dirname, 'uptime_report_viabtc.html');
        await fs.writeFile(outputPath, html, 'utf8');
        console.log('‚úÖ HTML —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', outputPath);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
    }
})();
